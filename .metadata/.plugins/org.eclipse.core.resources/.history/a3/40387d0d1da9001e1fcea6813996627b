package edu.pnu.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
//import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import edu.pnu.domain.MemberVO;

@RestController
//@RequestMapping("/api/public/") // 공통적인 url 정의 (이게 앞에 오고 뒤에 /member 등이 붙음)
public class MemberController {

	List<MemberVO> list;

	public MemberController() {
		System.out.println("===> MemberController 생성");

		list = new ArrayList<>();
		for (int i = 1; i <= 10; i++) {
//			MemberVO m = new MemberVO();
//			m.setId(i);
//			m.setPass("Password : " + i);
//			m.setName("Name : " + i);
//			m.setRegidate(new Date());
//			list.add(m);
			list.add(MemberVO.builder().id(i).name("name" + i).pass("pass" + i).regidate(new Date()).build());
		}
	}

	@GetMapping("/member")
	public List<MemberVO> getAllMembers() {
		return list;
	}

	@GetMapping("/member/{id}")
	public MemberVO getMemberById(@PathVariable Integer id) {
		for (MemberVO m : list) {
			if (m.getId() == id)
				return m;
		}
		return null;
	}

	private MemberVO getMember(MemberVO memberVO) {
		for (MemberVO m : list) {
			if (m.getId() == memberVO.getId())
				return m;
		}
		return null;
	}

	@PostMapping("/member")
	public int addMember(MemberVO memberVO) {
		if (getMember(memberVO) != null)
			return 0;
		memberVO.setRegidate(new Date());
		list.add(memberVO);
		return 1;
	}

	@PostMapping("/memberJSON")
	public int addMember1(MemberVO memberVO) {
		if (getMember(memberVO) != null)
			return 0;
		memberVO.setRegidate(new Date());
		list.add(memberVO);
		return 1;
	}

	@PutMapping("/member")
	public int updateMembers(MemberVO memberVO) {
		if (getMember(memberVO) = null)
			return 0;
		
		return 1;
	}

	@DeleteMapping("/member/{id}")
	public int removeMember(@PathVariable Integer id) {

		return id;
	}
}
